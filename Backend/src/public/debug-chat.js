// ========================================
// üß™ SCRIPT DE TEST CHAT TEMPS R√âEL
// Test pour diagnostiquer les probl√®mes de r√©ception
// ========================================

async function testerChatTempsReel() {
    console.log("üß™ [TEST] === D√âBUT TEST CHAT TEMPS R√âEL ===");
    
    try {
        // V√©rifier la connexion Socket.IO
        console.log("üîå [TEST] V√©rification Socket.IO...");
        console.log("Socket connect√©:", window.socket ? window.socket.connected : "NON DISPONIBLE");
        
        if (window.socket) {
            console.log("Socket ID:", window.socket.id);
        }
        
        // V√©rifier les utilisateurs connect√©s
        const user = JSON.parse(localStorage.getItem('user') || '{}');
        console.log("üë§ [TEST] Utilisateur actuel:", user);
        
        // Tester l'envoi d'un message de test
        if (window.socket && user._id) {
            console.log("üì§ [TEST] Envoi message de test...");
            
            const messageTest = {
                expediteurId: user._id,
                expediteurPrenom: user.prenom,
                expediteurNom: user.nom,
                destinataireId: "687d70306d2e0a81b830e9ec", // ID de fedetest
                destinatairePrenom: "fedetest",
                destinataireNom: "fedetest",
                message: "üß™ MESSAGE DE TEST " + new Date().toISOString(),
                date: new Date().toISOString()
            };
            
            // √âcouter les confirmations
            window.socket.once('message-envoye-confirmation', (confirmation) => {
                console.log("‚úÖ [TEST] Confirmation re√ßue:", confirmation);
            });
            
            // Envoyer le message
            window.socket.emit('envoyer-message-chat', messageTest);
            console.log("üì® [TEST] Message de test envoy√© via Socket.IO");
            
            // Tester aussi via HTTP
            const res = await fetch('/api/chat/envoyer', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(messageTest)
            });
            
            if (res.ok) {
                const reponse = await res.json();
                console.log("‚úÖ [TEST] R√©ponse HTTP:", reponse);
            } else {
                console.error("‚ùå [TEST] Erreur HTTP:", res.status);
            }
        }
        
        // V√©rifier les gestionnaires d'√©v√©nements
        console.log("üéß [TEST] V√©rification gestionnaires Socket.IO...");
        if (window.socket) {
            console.log("√âv√©nements Socket.IO enregistr√©s:", Object.keys(window.socket._callbacks || {}));
        }
        
        // V√©rifier le chat module
        console.log("üì± [TEST] V√©rification ChatModule...");
        console.log("ChatModule disponible:", typeof window.ChatModule);
        
        if (window.ChatModule) {
            console.log("Fonctions ChatModule:", Object.keys(window.ChatModule));
        }
        
    } catch (error) {
        console.error("üí• [TEST] Erreur lors du test:", error);
    }
    
    console.log("üèÅ [TEST] === FIN TEST CHAT TEMPS R√âEL ===");
}

// Exposer la fonction globalement pour pouvoir l'appeler depuis la console
window.testerChatTempsReel = testerChatTempsReel;

console.log("üß™ [TEST] Script de test chat charg√©. Utilisez: testerChatTempsReel()");

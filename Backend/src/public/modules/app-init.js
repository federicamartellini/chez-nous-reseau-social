// ========================================
// üöÄ MODULE D'INITIALISATION PRINCIPAL
// Coordination et orchestration de tous les modules
// ========================================

console.log("üöÄ [APP-INIT] === MODULE D'INITIALISATION PRINCIPAL CHARG√â ===");
console.log("‚ö° [TERMINAL] D√©marrage orchestration compl√®te de l'application");
console.log("üì± [TERMINAL] Chez Nous - R√©seau Social des Voisins v2.0 OPTIMIS√â");

// ========================================
// üìä VARIABLES GLOBALES D'√âTAT
// ========================================
let applicationInitialisee = false;
let modulesCharges = {
    navigation: false,
    profil: false,
    messages: false,
    historique: false,
    amis: false,
    chat: false
};

// ========================================
// üîç V√âRIFICATION √âTAT UTILISATEUR
// ========================================
function verifierEtatUtilisateur() {
    console.log("üîç [APP-INIT] === V√âRIFICATION √âTAT UTILISATEUR ===");
    console.log("üë§ [TERMINAL] Analyse session utilisateur actuelle");
    
    const userStored = localStorage.getItem('user');
    const currentUserIdStored = localStorage.getItem('currentUserId');
    
    console.log("üìä [APP-INIT] √âtat localStorage:");
    console.log(`   ‚îú‚îÄ‚îÄ user: ${userStored ? 'PR√âSENT' : 'ABSENT'}`);
    console.log(`   ‚îî‚îÄ‚îÄ currentUserId: ${currentUserIdStored || 'ABSENT'}`);
    
    if (userStored) {
        try {
            const user = JSON.parse(userStored);
            console.log("‚úÖ [APP-INIT] Utilisateur connect√© d√©tect√©:");
            console.log(`   ‚îú‚îÄ‚îÄ Nom: ${user.nom || 'Non d√©fini'}`);
            console.log(`   ‚îú‚îÄ‚îÄ Pr√©nom: ${user.prenom || 'Non d√©fini'}`);
            console.log(`   ‚îú‚îÄ‚îÄ Pseudo: ${user.pseudonyme || 'Non d√©fini'}`);
            console.log(`   ‚îú‚îÄ‚îÄ ID: ${user._id || 'Non d√©fini'}`);
            console.log(`   ‚îî‚îÄ‚îÄ Email: ${user.email ? user.email.substring(0, 3) + '***' : 'Non d√©fini'}`);
            
            // Synchroniser currentUserId si n√©cessaire
            if (!currentUserIdStored && user._id) {
                localStorage.setItem('currentUserId', user._id);
                console.log("üîÑ [APP-INIT] currentUserId synchronis√© automatiquement");
            }
            
            // Activer les sections pour utilisateur connect√©
            activerSectionsUtilisateur();
            
            return user;
            
        } catch (error) {
            console.error("üí• [APP-INIT] Erreur parsing user localStorage:", error.message);
            console.error("üßπ [TERMINAL] Nettoyage localStorage corrompu");
            localStorage.removeItem('user');
            localStorage.removeItem('currentUserId');
        }
    }
    
    console.log("‚ö†Ô∏è [APP-INIT] Aucun utilisateur connect√© - mode visiteur");
    console.log("üîê [TERMINAL] Interface limit√©e aux fonctionnalit√©s publiques");
    
    // D√©sactiver les sections pour visiteur
    desactiverSectionsUtilisateur();
    
    return null;
}

// ========================================
// üé® GESTION AFFICHAGE SECTIONS UTILISATEUR
// ========================================
function activerSectionsUtilisateur() {
    console.log("üé® [APP-INIT] Activation sections utilisateur connect√©");
    console.log("üë§ [TERMINAL] Affichage interface compl√®te");
    
    const sectionsUtilisateur = [
        'profilSection',
        'amisConfirmesSection',
        'chatSection'
    ];
    
    sectionsUtilisateur.forEach(sectionId => {
        const section = document.getElementById(sectionId);
        if (section) {
            section.style.display = 'block';
            console.log(`   ‚úÖ Section ${sectionId} activ√©e`);
        } else {
            console.warn(`   ‚ö†Ô∏è Section ${sectionId} introuvable`);
        }
    });
    
    console.log("‚úÖ [APP-INIT] Toutes les sections utilisateur activ√©es");
}

function desactiverSectionsUtilisateur() {
    console.log("üé® [APP-INIT] D√©sactivation sections utilisateur");
    console.log("üîê [TERMINAL] Interface limit√©e mode visiteur");
    
    const sectionsUtilisateur = [
        'profilSection',
        'amisConfirmesSection', 
        'chatSection'
    ];
    
    sectionsUtilisateur.forEach(sectionId => {
        const section = document.getElementById(sectionId);
        if (section) {
            section.style.display = 'none';
            console.log(`   üôà Section ${sectionId} masqu√©e`);
        }
    });
    
    console.log("‚úÖ [APP-INIT] Sections utilisateur d√©sactiv√©es");
}

// ========================================
// üìã SURVEILLANCE CHARGEMENT MODULES
// ========================================
function surveillerChargementModules() {
    console.log("üëÄ [APP-INIT] Surveillance chargement modules activ√©e");
    console.log("‚è±Ô∏è [TERMINAL] Attente finalisation chargement tous modules");
    
    const verifierModules = () => {
        // V√©rifier si les modules sont disponibles
        modulesCharges.navigation = typeof window.NavigationModule !== 'undefined';
        modulesCharges.profil = typeof window.ProfilModule !== 'undefined';
        modulesCharges.messages = typeof window.MessagesModule !== 'undefined';
        modulesCharges.historique = typeof window.HistoriqueModule !== 'undefined';
        modulesCharges.amis = typeof window.AmisModule !== 'undefined';
        modulesCharges.chat = typeof window.ChatModule !== 'undefined';
        
        const modulesCharg√©sCount = Object.values(modulesCharges).filter(Boolean).length;
        const totalModules = Object.keys(modulesCharges).length;
        
        console.log(`üìä [APP-INIT] √âtat chargement modules: ${modulesCharg√©sCount}/${totalModules}`);
        
        if (modulesCharg√©sCount === totalModules) {
            console.log("üéâ [APP-INIT] TOUS LES MODULES CHARG√âS AVEC SUCC√àS");
            console.log("‚úÖ [TERMINAL] Application compl√®tement op√©rationnelle");
            finaliserInitialisation();
            return true;
        }
        
        console.log("‚è≥ [APP-INIT] Modules en attente:", 
            Object.entries(modulesCharges)
                .filter(([nom, charge]) => !charge)
                .map(([nom]) => nom)
        );
        
        return false;
    };
    
    // V√©rification imm√©diate
    if (!verifierModules()) {
        // V√©rifications p√©riodiques
        const intervalId = setInterval(() => {
            if (verifierModules()) {
                clearInterval(intervalId);
            }
        }, 100);
        
        // Timeout de s√©curit√©
        setTimeout(() => {
            clearInterval(intervalId);
            if (!applicationInitialisee) {
                console.warn("‚ö†Ô∏è [APP-INIT] Timeout chargement modules - initialisation partielle");
                console.warn("üö® [TERMINAL] Certains modules peuvent ne pas √™tre fonctionnels");
                finaliserInitialisation();
            }
        }, 5000);
    }
}

// ========================================
// üèÅ FINALISATION INITIALISATION
// ========================================
function finaliserInitialisation() {
    console.log("üèÅ [APP-INIT] === FINALISATION INITIALISATION APPLICATION ===");
    console.log("üéØ [TERMINAL] Configuration finale et activation compl√®te");
    
    try {
        // Marquer comme initialis√©
        applicationInitialisee = true;
        
        // V√©rifier l'√©tat utilisateur final
        const utilisateur = verifierEtatUtilisateur();
        
        // Configurer la surveillance continue de l'√©tat utilisateur
        configurerSurveillanceUtilisateur();
        
        // Afficher les statistiques finales
        afficherStatistiquesApplication();
        
        // Notification de succ√®s
        console.log("üéâ [APP-INIT] === APPLICATION INITIALIS√âE AVEC SUCC√àS ===");
        console.log("‚úÖ [TERMINAL] Chez Nous v2.0 OPTIMIS√â - Pr√™t √† l'emploi");
        console.log("üöÄ [TERMINAL] Toutes les fonctionnalit√©s sont op√©rationnelles");
        
        // Petite notification utilisateur (optionnelle)
        if (utilisateur) {
            console.log(`üëã [TERMINAL] Bienvenue ${utilisateur.prenom} ! L'application est pr√™te.`);
        } else {
            console.log("üîê [TERMINAL] Mode visiteur - Connectez-vous pour acc√©der √† toutes les fonctionnalit√©s");
        }
        
    } catch (error) {
        console.error("üí• [APP-INIT] ERREUR lors de la finalisation:", error.message);
        console.error("üö® [TERMINAL] √âchec finalisation - fonctionnalit√©s limit√©es possibles");
    }
}

// ========================================
// üëÄ SURVEILLANCE CONTINUE UTILISATEUR
// ========================================
function configurerSurveillanceUtilisateur() {
    console.log("üëÄ [APP-INIT] Configuration surveillance continue utilisateur");
    console.log("üîÑ [TERMINAL] √âcoute changements √©tat connexion");
    
    let dernierEtatUser = localStorage.getItem('user');
    
    const surveillanceInterval = setInterval(() => {
        const etatActuelUser = localStorage.getItem('user');
        
        // D√©tecter changement d'√©tat
        if (etatActuelUser !== dernierEtatUser) {
            console.log("üîÑ [APP-INIT] Changement √©tat utilisateur d√©tect√©");
            console.log("‚ôªÔ∏è [TERMINAL] Mise √† jour interface automatique");
            
            // Mettre √† jour l'affichage
            if (etatActuelUser) {
                console.log("üë§ [APP-INIT] Utilisateur connect√© - activation interface");
                activerSectionsUtilisateur();
            } else {
                console.log("üëã [APP-INIT] Utilisateur d√©connect√© - d√©sactivation interface");
                desactiverSectionsUtilisateur();
            }
            
            // Notifier les modules du changement
            if (window.NavigationModule) {
                window.NavigationModule.mettreAJourUtilisateur();
            }
            if (window.ProfilModule) {
                window.ProfilModule.actualiser();
            }
            
            dernierEtatUser = etatActuelUser;
            console.log("‚úÖ [APP-INIT] Interface mise √† jour selon nouvel √©tat utilisateur");
        }
    }, 1000);
    
    console.log("‚úÖ [APP-INIT] Surveillance utilisateur configur√©e (v√©rification chaque seconde)");
}

// ========================================
// üìä AFFICHAGE STATISTIQUES APPLICATION
// ========================================
function afficherStatistiquesApplication() {
    console.log("üìä [APP-INIT] === STATISTIQUES APPLICATION ===");
    console.log("üìà [TERMINAL] R√©capitulatif √©tat syst√®me:");
    
    // Modules
    console.log("üîß [TERMINAL] √âtat des modules:");
    Object.entries(modulesCharges).forEach(([nom, charge]) => {
        console.log(`   ${charge ? '‚úÖ' : '‚ùå'} ${nom.toUpperCase()}: ${charge ? 'OP√âRATIONNEL' : '√âCHEC'}`);
    });
    
    // Utilisateur
    const user = JSON.parse(localStorage.getItem('user') || '{}');
    console.log("üë§ [TERMINAL] √âtat utilisateur:");
    console.log(`   ${user._id ? '‚úÖ' : '‚ùå'} Connexion: ${user._id ? 'CONNECT√â' : 'VISITEUR'}`);
    
    // LocalStorage
    const historiquePersonnel = JSON.parse(localStorage.getItem('historiquePersonnel') || '[]');
    const historiqueAmis = JSON.parse(localStorage.getItem('historiqueAmis') || '[]');
    console.log("üíæ [TERMINAL] Donn√©es locales:");
    console.log(`   üìã Historique personnel: ${historiquePersonnel.length} messages`);
    console.log(`   üë• Historique amis: ${historiqueAmis.length} messages`);
    
    // Performance
    console.log("‚ö° [TERMINAL] Performance:");
    console.log(`   üïê Temps initialisation: ${Date.now() - window.performance.timing.navigationStart}ms`);
    console.log(`   üß† Modules charg√©s: ${Object.values(modulesCharges).filter(Boolean).length}/6`);
    
    console.log("üìä [TERMINAL] === FIN STATISTIQUES ===");
}

// ========================================
// üîÑ FONCTION DE RED√âMARRAGE (UTILITAIRE)
// ========================================
function redemarrerApplication() {
    console.log("üîÑ [APP-INIT] Red√©marrage application demand√©");
    console.log("‚ôªÔ∏è [TERMINAL] R√©initialisation compl√®te en cours...");
    
    // R√©initialiser les variables
    applicationInitialisee = false;
    Object.keys(modulesCharges).forEach(key => {
        modulesCharges[key] = false;
    });
    
    // Relancer l'initialisation
    setTimeout(() => {
        initialiserApplication();
    }, 500);
}

// ========================================
// üöÄ FONCTION PRINCIPALE D'INITIALISATION
// ========================================
function initialiserApplication() {
    console.log("üöÄ [APP-INIT] === D√âBUT INITIALISATION APPLICATION ===");
    console.log("‚ö° [TERMINAL] Lancement s√©quence d'initialisation compl√®te");
    console.log("üìÖ [TERMINAL] Date/Heure: " + new Date().toLocaleString('fr-FR'));
    
    try {
        // √âtape 1: V√©rifier l'√©tat utilisateur
        console.log("üîç [APP-INIT] √âTAPE 1/3: V√©rification √©tat utilisateur");
        verifierEtatUtilisateur();
        
        // √âtape 2: D√©marrer la surveillance des modules
        console.log("üëÄ [APP-INIT] √âTAPE 2/3: Surveillance chargement modules");
        surveillerChargementModules();
        
        // √âtape 3: L'√©tape 3 (finalisation) sera d√©clench√©e automatiquement
        console.log("‚è≥ [APP-INIT] √âTAPE 3/3: En attente finalisation automatique");
        
        console.log("‚úÖ [APP-INIT] S√©quence d'initialisation lanc√©e avec succ√®s");
        console.log("‚è±Ô∏è [TERMINAL] Attente chargement complet des modules...");
        
    } catch (error) {
        console.error("üí• [APP-INIT] ERREUR CRITIQUE lors de l'initialisation:", error.message);
        console.error("üö® [TERMINAL] √âchec initialisation application:", error.stack);
        console.error("üÜò [TERMINAL] L'application peut ne pas fonctionner correctement");
    }
}

// ========================================
// üì± AUTO-INITIALISATION AU CHARGEMENT DOM
// ========================================
document.addEventListener('DOMContentLoaded', function() {
    console.log("üì± [APP-INIT] DOM charg√© - D√©marrage application");
    console.log("üåç [TERMINAL] Environnement: " + navigator.userAgent.substring(0, 50) + "...");
    console.log("üì± [TERMINAL] R√©solution: " + window.innerWidth + "x" + window.innerHeight);
    
    // Petite temporisation pour s'assurer que tout est pr√™t
    setTimeout(() => {
        initialiserApplication();
    }, 100);
});

// ========================================
// üåç EXPORTATION POUR USAGE EXTERNE
// ========================================
window.AppInit = {
    initialiser: initialiserApplication,
    redemarrer: redemarrerApplication,
    verifierUtilisateur: verifierEtatUtilisateur,
    activerSections: activerSectionsUtilisateur,
    desactiverSections: desactiverSectionsUtilisateur,
    statistiques: afficherStatistiquesApplication,
    etat: {
        initialise: () => applicationInitialisee,
        modules: () => modulesCharges
    }
};

console.log("‚úÖ [APP-INIT] === MODULE D'INITIALISATION D√âFINI ===");
console.log("üåç [TERMINAL] Module d'initialisation disponible globalement");
console.log("üéØ [TERMINAL] Chez Nous - Syst√®me d'initialisation v2.0 pr√™t");

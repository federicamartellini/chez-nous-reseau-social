// ========================================
// üë§ MODULE PROFIL OPTIMIS√â
// Gestion du profil utilisateur et des d√©tails
// ========================================

console.log("üöÄ [PROFIL] === MODULE PROFIL CHARG√â ===");
console.log("üë§ [TERMINAL] Initialisation du syst√®me de gestion profil");

// ========================================
// üìä VARIABLES GLOBALES DU PROFIL
// ========================================
let profilActuelAffich√© = false;

// ========================================
// üëÅÔ∏è GESTION AFFICHAGE/MASQUAGE D√âTAILS PROFIL
// ========================================
function toggleProfilDetails() {
    console.log("üîÑ [PROFIL] Toggle d√©tails profil demand√©");
    console.log("üëÅÔ∏è [TERMINAL] Basculement affichage d√©tails utilisateur");
    
    const detailsSection = document.getElementById('profil-details');
    const bouton = document.getElementById('voirProfilBtn');
    
    if (!detailsSection || !bouton) {
        console.error("‚ùå [PROFIL] √âl√©ments profil introuvables");
        console.error("üö´ [TERMINAL] Impossible d'afficher les d√©tails profil");
        return;
    }
    
    const estMasque = detailsSection.style.display === 'none';
    
    if (estMasque) {
        console.log("üëÅÔ∏è [PROFIL] Affichage des d√©tails profil");
        console.log("üìä [TERMINAL] Ouverture section d√©tails utilisateur");
        
        // Afficher les d√©tails
        detailsSection.style.display = 'block';
        detailsSection.setAttribute('aria-hidden', 'false');
        bouton.setAttribute('aria-expanded', 'true');
        bouton.textContent = 'Masquer le profil';
        bouton.setAttribute('aria-label', 'Masquer les d√©tails du profil utilisateur');
        
        profilActuelAffich√© = true;
        console.log("‚úÖ [PROFIL] D√©tails profil affich√©s avec succ√®s");
        
    } else {
        console.log("üôà [PROFIL] Masquage des d√©tails profil");
        console.log("üìä [TERMINAL] Fermeture section d√©tails utilisateur");
        
        // Masquer les d√©tails
        detailsSection.style.display = 'none';
        detailsSection.setAttribute('aria-hidden', 'true');
        bouton.setAttribute('aria-expanded', 'false');
        bouton.textContent = 'Voir le profil';
        bouton.setAttribute('aria-label', 'Voir les d√©tails du profil utilisateur');
        
        profilActuelAffich√© = false;
        console.log("‚úÖ [PROFIL] D√©tails profil masqu√©s avec succ√®s");
    }
}

// ========================================
// üìù CHARGEMENT DES DONN√âES PROFIL
// ========================================
function chargerDonneesProfil() {
    console.log("üì• [PROFIL] === D√âBUT CHARGEMENT DONN√âES PROFIL ===");
    console.log("üíæ [TERMINAL] R√©cup√©ration informations utilisateur connect√©");
    
    try {
        const user = JSON.parse(localStorage.getItem('user') || '{}');
        
        if (!user._id) {
            console.warn("‚ö†Ô∏è [PROFIL] Aucun utilisateur connect√©");
            console.warn("üîê [TERMINAL] Impossible de charger profil - session inexistante");
            return false;
        }
        
        console.log("üë§ [PROFIL] Utilisateur trouv√©:");
        console.log(`   üìõ Nom: ${user.nom || 'Non d√©fini'}`);
        console.log(`   üëã Pr√©nom: ${user.prenom || 'Non d√©fini'}`);
        console.log(`   üé≠ Pseudo: ${user.pseudonyme || 'Non d√©fini'}`);
        console.log(`   üìç R√©gion: ${user.region || 'Non d√©finie'}`);
        console.log(`   üìß Email: ${user.email || 'Non d√©fini'}`);
        console.log(`   üéóÔ∏è R√¥le: ${user.role || 'Membre'}`);
        console.log(`   üÜî ID: ${user._id}`);
        
        // Mise √† jour des √©l√©ments du profil
        const elements = {
            profilNom: user.nom || 'Non d√©fini',
            profilPrenom: user.prenom || 'Non d√©fini', 
            profilPseudo: user.pseudonyme || 'Non d√©fini',
            profilRegion: user.region || 'Non d√©finie',
            profilEmail: masquerEmail(user.email) || 'Non d√©fini',
            profilRole: user.role || 'Membre'
        };
        
        console.log("üé® [PROFIL] Mise √† jour des √©l√©ments HTML:");
        for (const [elementId, valeur] of Object.entries(elements)) {
            const element = document.getElementById(elementId);
            if (element) {
                element.textContent = valeur;
                console.log(`   ‚úÖ ${elementId}: "${valeur}"`);
            } else {
                console.warn(`   ‚ö†Ô∏è √âl√©ment ${elementId} introuvable`);
            }
        }
        
        console.log("‚úÖ [PROFIL] === DONN√âES PROFIL CHARG√âES AVEC SUCC√àS ===");
        console.log("üéâ [TERMINAL] Profil utilisateur mis √† jour dans l'interface");
        return true;
        
    } catch (error) {
        console.error("üí• [PROFIL] ERREUR lors du chargement profil:", error.message);
        console.error("üö® [TERMINAL] √âchec chargement profil:", error.stack);
        return false;
    }
}

// ========================================
// üîí UTILITAIRE MASQUAGE EMAIL (RGPD)
// ========================================
function masquerEmail(email) {
    if (!email || !email.includes('@')) {
        return email;
    }
    
    const [nom, domaine] = email.split('@');
    const nomMasque = nom.length > 2 ? 
        nom.substring(0, 2) + '*'.repeat(nom.length - 2) : 
        nom + '*';
    
    const emailMasque = nomMasque + '@' + domaine;
    
    console.log(`üîí [PROFIL] Email masqu√© pour RGPD: ${email} ‚Üí ${emailMasque}`);
    
    return emailMasque;
}

// ========================================
// üé® AFFICHAGE/MASQUAGE SECTION PROFIL
// ========================================
function afficherSectionProfil() {
    console.log("üé® [PROFIL] Affichage section profil demand√©");
    console.log("üì± [TERMINAL] Activation interface profil utilisateur");
    
    const profilSection = document.getElementById('profilSection');
    
    if (!profilSection) {
        console.error("‚ùå [PROFIL] Section profil introuvable");
        console.error("üö´ [TERMINAL] Impossible d'afficher section profil");
        return false;
    }
    
    const user = JSON.parse(localStorage.getItem('user') || '{}');
    
    if (!user._id) {
        console.warn("‚ö†Ô∏è [PROFIL] Utilisateur non connect√© - masquage section profil");
        console.warn("üîê [TERMINAL] Section profil non disponible pour visiteur");
        profilSection.style.display = 'none';
        return false;
    }
    
    // Charger les donn√©es et afficher la section
    if (chargerDonneesProfil()) {
        profilSection.style.display = 'block';
        console.log("‚úÖ [PROFIL] Section profil affich√©e avec succ√®s");
        console.log("üéâ [TERMINAL] Interface profil op√©rationnelle");
        return true;
    }
    
    return false;
}

function masquerSectionProfil() {
    console.log("üôà [PROFIL] Masquage section profil");
    console.log("üì± [TERMINAL] D√©sactivation interface profil");
    
    const profilSection = document.getElementById('profilSection');
    
    if (profilSection) {
        profilSection.style.display = 'none';
        console.log("‚úÖ [PROFIL] Section profil masqu√©e");
    }
}

// ========================================
// üîÑ ACTUALISATION PROFIL
// ========================================
function actualiserProfil() {
    console.log("üîÑ [PROFIL] Actualisation profil demand√©e");
    console.log("‚ôªÔ∏è [TERMINAL] Rechargement donn√©es profil utilisateur");
    
    const user = JSON.parse(localStorage.getItem('user') || '{}');
    
    if (user._id) {
        console.log("üë§ [PROFIL] Utilisateur connect√© - actualisation profil");
        afficherSectionProfil();
    } else {
        console.log("üë§ [PROFIL] Aucun utilisateur - masquage profil");
        masquerSectionProfil();
    }
}

// ========================================
// üöÄ INITIALISATION DU MODULE PROFIL
// ========================================
function initialiserProfil() {
    console.log("üöÄ [PROFIL] === D√âBUT INITIALISATION PROFIL ===");
    console.log("üë§ [TERMINAL] Configuration syst√®me gestion profil");
    
    try {
        // Configurer le bouton de toggle des d√©tails
        const boutonProfil = document.getElementById('voirProfilBtn');
        if (boutonProfil) {
            boutonProfil.addEventListener('click', toggleProfilDetails);
            console.log("‚úÖ [PROFIL] Bouton toggle profil configur√©");
        } else {
            console.warn("‚ö†Ô∏è [PROFIL] Bouton toggle profil introuvable");
        }
        
        // V√©rifier et afficher le profil si utilisateur connect√©
        actualiserProfil();
        
        console.log("‚úÖ [PROFIL] === PROFIL INITIALIS√â AVEC SUCC√àS ===");
        console.log("üéâ [TERMINAL] Syst√®me profil op√©rationnel");
        
    } catch (error) {
        console.error("üí• [PROFIL] ERREUR lors de l'initialisation:", error.message);
        console.error("üö® [TERMINAL] √âchec initialisation profil:", error.stack);
    }
}

// ========================================
// üì± AUTO-INITIALISATION
// ========================================
document.addEventListener('DOMContentLoaded', function() {
    console.log("üì± [PROFIL] DOM charg√© - Lancement profil");
    console.log("‚è±Ô∏è [TERMINAL] Temporisation pour assurer le chargement");
    
    setTimeout(() => {
        initialiserProfil();
    }, 200);
});

// ========================================
// üåç EXPORTATION POUR USAGE EXTERNE
// ========================================
window.ProfilModule = {
    initialiser: initialiserProfil,
    actualiser: actualiserProfil,
    afficher: afficherSectionProfil,
    masquer: masquerSectionProfil,
    toggleDetails: toggleProfilDetails,
    chargerDonnees: chargerDonneesProfil
};

console.log("‚úÖ [PROFIL] === MODULE PROFIL D√âFINI ===");
console.log("üåç [TERMINAL] Module profil disponible globalement");
